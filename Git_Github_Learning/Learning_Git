Hello There,
      Thanks for reading this. i'll update git commands here.
Thanks.

============================================================
              Learning Git and Github
============================================================

GIT BASICS :

 Working Directory        ---> Your local workstation.  
 git init                 ---> Initialize Empty Repo.
 git config --global      ---> user.name or user.email to Configure user.
 git config --list        ---> To check the configurations.
 Staging Area             ---> where the files/code are Staged(kind of saved).
 git commit               ---> Files are Commited (Kind of permenantly saved).
 vi .gitignore            ---> To Ignore Unwanted Files in Directory.(Creates hidden file .gitignore)

GIT COMMANDS :
  git clone {URL}          ---> Clones the repository from URL.
  git add origin {URL}     ---> Adds the origin. 
  git pull                 ---> Pulls code/files from Repo.
  git init                 ---> Initialize Empty Repo.
  git add .                ---> Adds the files into Staging area. 
  git status               ---> Lists all new/modified files to be committed.
  git commit -m "Message"  ---> Commits the changes to local repository.
  git push -u origin master---> Pushes the commited changes to Original Repo(-u is optional for user).
  git log <-1>             ---> Shows Commit logs, -1 or 2 for recent logs.
  git log --oneline        ---> Shows all commits, In short.
  git show <id><-1>        ---> Shows Commit Details,by using commit id or -1 or 2 for recent commits.
  git stash                ---> Used to temporarily Save Uncommitted changes and work on other(list:to show,apply @{}:to Switch,clear).  git tag -a <name> -m "Mess" <commit id> --> Use to Tag a Commit.
  git tag -d <Name>        ---> To Delete a Tag.
  git clean -n or -f       ---> Clean Unwanted Files, -n for dry run, -f for forcefully.
  git branch <name>  	   ---> To Create Branch, (without name will show list of Branches.)
  git checkout <Name>	   ---> To Switch from branches.
  git merge <Name>	   ---> To Merge branches (You must be in Master or main Branch and resolve conflicts if any).
  git revert <Commit id>   ---> To Revert From Current Changes and Updates previous state to Current.



